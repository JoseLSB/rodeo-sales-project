unit MFichas.Controller.Venda;

interface

uses
  MFichas.Controller.Caixa.Interfaces,
  MFichas.Controller.Venda.Interfaces,

  MFichas.Model.Venda.Interfaces,
  MFichas.Model.Venda,
  MFichas.Model.Caixa;

type
  TControllerVenda = class(TInterfacedObject, iControllerVenda)
  private
    [weak]
    FParent : iControllerCaixa;
    FMetodos: iControllerVendaMetodos;
    FModel  : iModelVenda;
    constructor Create(AParent: iControllerCaixa);
  public
    destructor Destroy; override;
    class function New(AParent: iControllerCaixa): iControllerVenda;
    function Metodos: iControllerVendaMetodos;
  end;

implementation

{ TControllerVenda }

constructor TControllerVenda.Create(AParent: iControllerCaixa);
begin
  FParent := AParent;

  if not Assigned(FModel) then
    FModel := TModelVenda.New(TModelCaixa.New);
end;

destructor TControllerVenda.Destroy;
begin

  inherited;
end;

function TControllerVenda.Metodos: iControllerVendaMetodos;
begin

end;

class function TControllerVenda.New(AParent: iControllerCaixa): iControllerVenda;
begin
  Result := Self.Create(AParent);
end;

end.
