unit MFichas.Model.GrupoProduto.Metodos.Editar;

interface

uses
  System.SysUtils,

  MFichas.Model.GrupoProduto.Interfaces,
  MFichas.Model.Entidade.GRUPOPRODUTO;

type
  TModelGrupoProdutoMetodosEditar = class(TInterfacedObject, iModelGrupoProdutoMetodosEditar)
  private
    [weak]
    FParent   : iModelGrupoProduto;
    FEntidade : TGRUPOPRODUTO;
    FGUUID    : String;
    FDescricao: String;
    constructor Create(AParent: iModelGrupoProduto);
  public
    destructor Destroy; override;
    class function New(AParent: iModelGrupoProduto): iModelGrupoProdutoMetodosEditar;
    function GUUID(AGUUID: String)        : iModelGrupoProdutoMetodosEditar;
    function Descricao(ADescricao: String): iModelGrupoProdutoMetodosEditar;
    function &End                         : iModelGrupoProdutoMetodosEditar;
  end;

implementation

{ TModelGrupoProdutoMetodosEditar }

function TModelGrupoProdutoMetodosEditar.&End: iModelGrupoProdutoMetodosEditar;
begin

end;

constructor TModelGrupoProdutoMetodosEditar.Create(AParent: iModelGrupoProduto);
begin
  FParent := AParent;
  FEntidade := TGRUPOPRODUTO.Create;
end;

function TModelGrupoProdutoMetodosEditar.Descricao(
  ADescricao: String): iModelGrupoProdutoMetodosEditar;
begin
  Result     := Self;
  if ADescricao.IsNullOrWhiteSpace(ADescricao) then
    raise Exception.Create(
      'Não é possível alterar um grupo sem adicioná-lo um Nome/Descrição.'
    );
  FDescricao := ADescricao;
end;

destructor TModelGrupoProdutoMetodosEditar.Destroy;
begin
  {$IFMSWINDOWS}
  FreeAndNil(FEntidade);
  {$ELSE}
  FEntidade.Free;
  FEntidade.DisposeOf;
  {$ENDIF}
  inherited;
end;

function TModelGrupoProdutoMetodosEditar.GUUID(
  AGUUID: String): iModelGrupoProdutoMetodosEditar;
begin
  Result := Self;
  FGUUID := AGUUID;
end;

class function TModelGrupoProdutoMetodosEditar.New(AParent: iModelGrupoProduto): iModelGrupoProdutoMetodosEditar;
begin
  Result := Self.Create(AParent);
end;

end.
