unit MFichas.Model.Usuario.Funcoes.Buscar;

interface

uses
  System.SysUtils,

  MFichas.Model.Usuario.Interfaces,

  FireDAC.Comp.Client,
  FireDAC.Comp.DataSet, MFichas.Controller.Types;

type
  TModelUsuarioFuncoesBuscar = class(TInterfacedObject, iModelUsuarioFuncoesBuscar)
  private
    [weak]
    FParent    : iModelUsuario;
    FFDMemTable: TFDMemTable;
    constructor Create(AParent: iModelUsuario);
    procedure CopiarDataSet;
    procedure Validacao;
  public
    destructor Destroy; override;
    class function New(AParent: iModelUsuario): iModelUsuarioFuncoesBuscar;
    function FDMemTable(AFDMemTable: TFDMemTable): iModelUsuarioFuncoesBuscar;
    function BuscarTodos                         : iModelUsuarioFuncoesBuscar;
    function BuscarTodosAtivos                   : iModelUsuarioFuncoesBuscar;
    function BuscarPorCodigo(AGUUID: String)     : iModelUsuarioFuncoesBuscar;
    function &End                                : iModelUsuarioFuncoes;
  end;

implementation

{ TModelUsuarioFuncoesBuscar }

function TModelUsuarioFuncoesBuscar.BuscarPorCodigo(AGUUID: String): iModelUsuarioFuncoesBuscar;
begin
  Result := Self;
  FParent.DAODataSet.OpenWhere(
    ' GUUID = ' + QuotedStr(AGUUID) + ' AND ' +
    ' STATUS = ' + Integer(saiAtivo).ToString
  );
  Validacao;
  CopiarDataSet;
end;

function TModelUsuarioFuncoesBuscar.BuscarTodos: iModelUsuarioFuncoesBuscar;
begin
  Result := Self;
  FParent.DAODataSet.Open;
  Validacao;
  CopiarDataSet;
end;

function TModelUsuarioFuncoesBuscar.BuscarTodosAtivos: iModelUsuarioFuncoesBuscar;
begin
  Result := Self;
  FParent.DAODataSet.OpenWhere(
    'STATUS = ' + Integer(saiAtivo).ToString
  );
  Validacao;
  CopiarDataSet;
end;

function TModelUsuarioFuncoesBuscar.&End: iModelUsuarioFuncoes;
begin
  Result := FParent.Funcoes;
end;

function TModelUsuarioFuncoesBuscar.FDMemTable(
  AFDMemTable: TFDMemTable): iModelUsuarioFuncoesBuscar;
begin
  Result      := Self;
  FFDMemTable := AFDMemTable;
end;

procedure TModelUsuarioFuncoesBuscar.CopiarDataSet;
begin
  FFDMemTable.CopyDataSet(FParent.DAODataSet.DataSet, [coStructure, coRestart, coAppend]);
  FFDMemTable.IndexFieldNames := 'NOME';
end;

constructor TModelUsuarioFuncoesBuscar.Create(AParent: iModelUsuario);
begin
  FParent := AParent;
end;

destructor TModelUsuarioFuncoesBuscar.Destroy;
begin

  inherited;
end;

class function TModelUsuarioFuncoesBuscar.New(AParent: iModelUsuario): iModelUsuarioFuncoesBuscar;
begin
  Result := Self.Create(AParent);
end;

procedure TModelUsuarioFuncoesBuscar.Validacao;
begin
  if FParent.DAODataSet.DataSet.RecordCount = 0 then
    raise Exception.Create('Nenhum usuário encontrado.');
end;

end.
