unit MFichas.Model.Pagamento.Formas.Dinheiro.Processar;

interface

uses
  System.SysUtils,

  MFichas.Model.Pagamento.Interfaces,
  MFichas.Model.Entidade.VENDAPAGAMENTOS;

type
  TModelPagamentoFormasDinheiroProcessar = class(TInterfacedObject, iModelPagamentoMetodosProcessar)
  private
    [weak]
    FParent: iModelPagamentoMetodos;
    FValor : Currency;
    FEntidade: TVENDAPAGAMENTOS;
    constructor Create(AParent: iModelPagamentoMetodos);
    procedure Gravar;
  public
    destructor Destroy; override;
    class function New(AParent: iModelPagamentoMetodos): iModelPagamentoMetodosProcessar;
    function SetValor(AValue: Currency): iModelPagamentoMetodosProcessar;
    function &End                      : iModelPagamentoMetodos;
  end;

implementation

{ TModelPagamentoFormasDinheiroProcessar }

function TModelPagamentoFormasDinheiroProcessar.&End: iModelPagamentoMetodos;
begin
  //TODO: IMPLEMENTAR METODO DE PAGAMENTO EM DINHEIRO.
  Result := FParent;
  Gravar;
end;

procedure TModelPagamentoFormasDinheiroProcessar.Gravar;
begin
  FEntidade.VENDA := '0';
  FEntidade.TIPO := 1;
  FEntidade.VALOR := 1;
  FEntidade.STATUS := 1;
end;

constructor TModelPagamentoFormasDinheiroProcessar.Create(AParent: iModelPagamentoMetodos);
begin
  FParent := AParent;
  FEntidade := TVENDAPAGAMENTOS.Create;
end;

destructor TModelPagamentoFormasDinheiroProcessar.Destroy;
begin
  FreeAndNil(FEntidade);
  inherited;
end;

class function TModelPagamentoFormasDinheiroProcessar.New(AParent: iModelPagamentoMetodos): iModelPagamentoMetodosProcessar;
begin
  Result := Self.Create(AParent);
end;

function TModelPagamentoFormasDinheiroProcessar.SetValor(
  AValue: Currency): iModelPagamentoMetodosProcessar;
begin
  Result := Self;
  FValor := AValue;
end;

end.
