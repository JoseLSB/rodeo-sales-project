unit MFichas.Model.Conexao.SQL;

interface

uses
  System.SysUtils,
  System.Classes,
  System.IOUtils,

  FireDAC.Stan.Intf,
  FireDAC.Stan.Option,
  FireDAC.Stan.Error,
  FireDAC.UI.Intf,
  FireDAC.Phys.Intf,
  FireDAC.Stan.Def,
  FireDAC.Stan.Pool,
  FireDAC.Stan.Async,
  FireDAC.Phys,
  FireDAC.Phys.FB,
  FireDAC.Phys.FBDef,
  FireDAC.FMXUI.Wait,
  FireDAC.Comp.UI,
  FireDAC.Phys.IBBase,
  FireDAC.Comp.Client,
//  FireDAC.VCLUI.Wait,
  FireDAC.Phys.SQLite,
  FireDAC.Phys.SQLiteDef,
  FireDAC.Stan.ExprFuncs,

  Data.DB,

  ORMBR.Factory.Interfaces,
  ORMBR.Factory.FireDAC,
  ORMBR.Types.DataBase,
  ORMBR.DDL.Generator.SQLite,
  ORMBR.DML.Generator.SQLite,

  MFichas.Model.Conexao.Interfaces;

const
  CaminhoDoBancoSQLiteLocal  = 'C:\PROJETOS\Bancos\SQLite\FICHAS.db3';
  CaminhoDoBancoSQLiteMobile = 'FICHAS.db3';

type
  TModelConexaoSQL = class(TInterfacedObject, iModelConexaoSQL)
  private
    FFDConnection: TFDConnection;
    FConn        : IDBConnection;
    constructor Create;
    procedure CriarFDConnection;
  public
    destructor Destroy; override;
    class function New: iModelConexaoSQL;
    function Conn: iDBConnection;
  end;

implementation

{ TModelConexaoSQL }

function TModelConexaoSQL.Conn: iDBConnection;
begin
  Result := FConn;
end;

constructor TModelConexaoSQL.Create;
begin
  CriarFDConnection;
  FConn := TFactoryFireDAC.Create(FFDConnection, dnSQLite);
end;

procedure TModelConexaoSQL.CriarFDConnection;
begin
  FFDConnection := TFDConnection.Create(nil);
  {$IFDEF MSWINDOWS}
  FFDConnection.Params.Database := CaminhoDoBancoSQLiteLocal;
  {$ELSE}
  FFDConnection.Params.Values['Database'] := TPath.Combine(TPath.GetDocumentsPath, CaminhoDoBancoSQLiteMobile);
  {$ENDIF}
  FFDConnection.DriverName      := 'SQLite';
  FFDConnection.Params.DriverID := 'SQLite';
  FFDConnection.Params.Add('LockingMode=Normal');
  FFDConnection.Connected       := True;
end;

destructor TModelConexaoSQL.Destroy;
begin
  {$IFDEF MSWINDOWS}
  FreeAndNil(FFDConnection);
  {$ELSE}
  FFDConnection.Free;
  FFDConnection.DisposeOf;
  {$ENDIF}
  inherited;
end;

class function TModelConexaoSQL.New: iModelConexaoSQL;
begin
  Result := Self.Create;
end;

end.
