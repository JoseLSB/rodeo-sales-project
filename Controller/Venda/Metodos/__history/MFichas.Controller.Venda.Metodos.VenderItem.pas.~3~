unit MFichas.Controller.Venda.Metodos.VenderItem;

interface

uses
  MFichas.Controller.Venda.Interfaces;

type
  TControllerVendaMetodosVenderItem = class(TInterfacedObject, iControllerVendaMetodosVenderItem)
  private
    [weak]
    FParent    : iControllerVenda;
    FCodigo    : String;
    FQuantidade: Double;
    FValor     : Currency;
    constructor Create(AParent: iControllerVenda);
  public
    destructor Destroy; override;
    class function New(AParent: iControllerVenda): iControllerVendaMetodosVenderItem;
    function Codigo(ACodigo: String)        : iControllerVendaMetodosVenderItem;
    function Quantidade(AQuantidade: Double): iControllerVendaMetodosVenderItem;
    function Valor(AValor: Currency)        : iControllerVendaMetodosVenderItem;
    function Executar                       : iControllerVendaMetodosVenderItem;
    function &End                           : iControllerVendaMetodos;
  end;

implementation

{ TControllerVendaMetodosVenderItem }

function TControllerVendaMetodosVenderItem.Codigo(
  ACodigo: String): iControllerVendaMetodosVenderItem;
begin
  Result  := Self;
  FCodigo := ACodigo;
end;

function TControllerVendaMetodosVenderItem.&End: iControllerVendaMetodos;
begin

end;

constructor TControllerVendaMetodosVenderItem.Create(AParent: iControllerVenda);
begin
  FParent := AParent;
end;

destructor TControllerVendaMetodosVenderItem.Destroy;
begin

  inherited;
end;

function TControllerVendaMetodosVenderItem.Executar: iControllerVendaMetodosVenderItem;
begin

end;

class function TControllerVendaMetodosVenderItem.New(AParent: iControllerVenda): iControllerVendaMetodosVenderItem;
begin
  Result := Self.Create(AParent);
end;

function TControllerVendaMetodosVenderItem.Quantidade(
  AQuantidade: Double): iControllerVendaMetodosVenderItem;
begin
  Result      := Self;
  FQuantidade := AQuantidade;
end;

function TControllerVendaMetodosVenderItem.Valor(
  AValor: Currency): iControllerVendaMetodosVenderItem;
begin
  Result := Self;
  FValor := AValor;
end;

end.
