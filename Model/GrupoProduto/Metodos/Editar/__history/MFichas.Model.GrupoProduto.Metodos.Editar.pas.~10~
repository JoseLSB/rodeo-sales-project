unit MFichas.Model.GrupoProduto.Metodos.Editar;

interface

uses
  System.SysUtils,
  System.Generics.Collections,

  MFichas.Model.GrupoProduto.Interfaces,
  MFichas.Model.Entidade.GRUPOPRODUTO;

type
  TModelGrupoProdutoMetodosEditar = class(TInterfacedObject, iModelGrupoProdutoMetodosEditar)
  private
    [weak]
    FParent      : iModelGrupoProduto;
    FEntidade    : TGRUPOPRODUTO;
    FGUUID       : String;
    FDescricao   : String;
    FAtivoInativo: Integer;
    FListaGrupo: TObjectList<TGRUPOPRODUTO>;
    constructor Create(AParent: iModelGrupoProduto);
    procedure RecuperarObjetoDoBancoDeDados;
  public
    destructor Destroy; override;
    class function New(AParent: iModelGrupoProduto): iModelGrupoProdutoMetodosEditar;
    function GUUID(AGUUID: String)        : iModelGrupoProdutoMetodosEditar;
    function Descricao(ADescricao: String): iModelGrupoProdutoMetodosEditar;
    function AtivoInativo(AValue: Integer): iModelGrupoProdutoMetodosEditar;
    function &End                         : iModelGrupoProdutoMetodosEditar;
  end;

implementation

{ TModelGrupoProdutoMetodosEditar }

function TModelGrupoProdutoMetodosEditar.&End: iModelGrupoProdutoMetodosEditar;
begin
  Result := FParent.Metodos;
end;

function TModelGrupoProdutoMetodosEditar.AtivoInativo(
  AValue: Integer): iModelGrupoProdutoMetodosEditar;
begin
  Result        := Self;
  FAtivoInativo := AValue;
end;

constructor TModelGrupoProdutoMetodosEditar.Create(AParent: iModelGrupoProduto);
begin
  FParent := AParent;
  FEntidade := TGRUPOPRODUTO.Create;
end;

function TModelGrupoProdutoMetodosEditar.Descricao(
  ADescricao: String): iModelGrupoProdutoMetodosEditar;
begin
  Result     := Self;
  if ADescricao.IsNullOrWhiteSpace(ADescricao) then
    raise Exception.Create(
      'Não é possível alterar um grupo sem adicioná-lo um Nome/Descrição.'
    );
  FDescricao := ADescricao;
end;

destructor TModelGrupoProdutoMetodosEditar.Destroy;
begin
  {$IFMSWINDOWS}
  FreeAndNil(FEntidade);
  {$ELSE}
  FEntidade.Free;
  FEntidade.DisposeOf;
  {$ENDIF}
  inherited;
end;

function TModelGrupoProdutoMetodosEditar.GUUID(
  AGUUID: String): iModelGrupoProdutoMetodosEditar;
begin
  Result := Self;
  FGUUID := AGUUID;
end;

class function TModelGrupoProdutoMetodosEditar.New(AParent: iModelGrupoProduto): iModelGrupoProdutoMetodosEditar;
begin
  Result := Self.Create(AParent);
end;

procedure TModelGrupoProdutoMetodosEditar.RecuperarObjetoDoBancoDeDados;
begin
  FListaGrupo := FParent.DAO.FindWhere('GUUID = ' + QuotedStr(FGUUID));

  FEntidade.GUUID         := FListaGrupo[0].GUUID;
  FEntidade.DESCRICAO         := FListaGrupo[0].GRUPO;
  FEntidade.STATUS        := FListaGrupo[0].CODIGO;
  FEntidade.DATACADASTRO     := FListaGrupo[0].DESCRICAO;
  FEntidade.DATAALTERACAO         := FListaGrupo[0].PRECO;
end;

end.
