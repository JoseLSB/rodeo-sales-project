unit MFichas.Model.Usuario;

interface

uses
  System.SysUtils,

  MFichas.Model.Usuario.Interfaces,
  MFichas.Model.Entidade.USUARIO,
  MFichas.Model.Conexao.Interfaces,
  MFichas.Model.Conexao.Factory,

  ORMBR.Container.ObjectSet,
  ORMBR.Container.ObjectSet.Interfaces,
  ORMBR.Container.FDMemTable,
  ORMBR.Container.DataSet.interfaces,

  FireDAC.Comp.Client;

type
  TModelUsuario = class(TInterfacedObject, iModelUsuario, iModelUsuarioFuncoes)
  private
    FEntidade      : TUSUARIO;
    FEntidadeFiscal: TUSUARIO;
    FConn          : iModelConexaoSQL;
    FDAOObjectSet  : IContainerObjectSet<TUSUARIO>;
    FDAODataSet    : IContainerDataSet<TUSUARIO>;
    FFDMemTable    : TFDMemTable;
    FMetodos       : iModelUsuarioMetodos;
    constructor Create;
  public
    destructor Destroy; override;
    class function New: iModelUsuario;
    function Metodos(AValue: iModelUsuarioMetodos): iModelUsuarioMetodos;
    function Funcoes                      : iModelUsuarioFuncoes;
    function Entidade                     : TUSUARIO; overload;
    function EntidadeFiscal               : TUSUARIO;
    function Entidade(AEntidade: TUSUARIO): iModelUsuario; overload;
    function DAO                          : iContainerObjectSet<TUSUARIO>;
    function DAODataSet                   : iContainerDataSet<TUSUARIO>;
    //FUNCOES
    function Cadastrar: iModelUsuarioFuncoesCadastrar;
    function Editar   : iModelUsuarioFuncoesEditar;
    function Buscar   : iModelUsuarioFuncoesBuscar;
    function &End     : iModelUsuario;
  end;

implementation

{ TModelUsuario }

uses
  MFichas.Model.Usuario.Funcoes.Buscar,
  MFichas.Model.Usuario.Funcoes.Cadastrar,
  MFichas.Model.Usuario.Funcoes.Editar;

function TModelUsuario.Buscar: iModelUsuarioFuncoesBuscar;
begin

end;

function TModelUsuario.Cadastrar: iModelUsuarioFuncoesCadastrar;
begin
  Result :=
end;

function TModelUsuario.&End: iModelUsuario;
begin

end;

constructor TModelUsuario.Create;
begin
  FEntidade       := TUSUARIO.Create;
  FEntidadeFiscal := TUSUARIO.Create;
  FConn           := TModelConexaoFactory.New.ConexaoSQL;
  FDAOObjectSet   := TContainerObjectSet<TUSUARIO>.Create(FConn.Conn, 10);
  FFDMemTable     := TFDMemTable.Create(nil);
  FDAODataSet     := TContainerFDMemTable<TUSUARIO>.Create(FConn.Conn, FFDMemTable);
end;

function TModelUsuario.DAO: iContainerObjectSet<TUSUARIO>;
begin
  Result := FDAOObjectSet;
end;

function TModelUsuario.DAODataSet: iContainerDataSet<TUSUARIO>;
begin
  Result := FDAODataSet;
end;

destructor TModelUsuario.Destroy;
begin
  {$IFDEF MSWINDOWS}
  FreeAndNil(FEntidade);
  FreeAndNil(FEntidadeFiscal);
  FreeAndNil(FFDMemTable);
  {$ELSE}
  FEntidade.Free;
  FEntidade.DisposeOf;
  FEntidadeFiscal.Free;
  FEntidadeFiscal.DisposeOf;
  FFDMemTable.Free;
  FFDMemTable.DisposeOf;
  {$ENDIF}
  inherited;
end;

function TModelUsuario.Entidade: TUSUARIO;
begin
  Result := FEntidade;
end;

function TModelUsuario.Editar: iModelUsuarioFuncoesEditar;
begin

end;

function TModelUsuario.Entidade(AEntidade: TUSUARIO): iModelUsuario;
begin
  Result    := Self;
  FEntidade := AEntidade;
end;

function TModelUsuario.EntidadeFiscal: TUSUARIO;
begin
  Result := FEntidadeFiscal;
end;

function TModelUsuario.Funcoes: iModelUsuarioFuncoes;
begin
  Result := Self;
end;

function TModelUsuario.Metodos(
  AValue: iModelUsuarioMetodos): iModelUsuarioMetodos;
begin
  FMetodos := AValue;
  Result   := FMetodos;
end;

class function TModelUsuario.New: iModelUsuario;
begin
  Result := Self.Create;
end;

end.
