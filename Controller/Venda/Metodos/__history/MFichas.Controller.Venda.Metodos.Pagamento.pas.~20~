unit MFichas.Controller.Venda.Metodos.Pagamento;

interface

uses
  System.SysUtils,

  MFichas.Controller.Venda.Interfaces,
  MFichas.Controller.Types,

  MFichas.Model.Venda.Interfaces, MFichas.Model.Pagamento.Interfaces;

type
  TControllerVendaMetodosPagar = class(TInterfacedObject, iControllerVendaMetodosPagar)
  private
    [weak]
    FParent         : iControllerVenda;
    FModel          : iModelVenda;
    FTipoVenda      : TTypeTipoVenda;
    FMetodoPagamento: iModelPagamentoMetodos;
    constructor Create(AParent: iControllerVenda; AModel: iModelVenda);
    procedure Validacao;
  public
    destructor Destroy; override;
    class function New(AParent: iControllerVenda; AModel: iModelVenda): iControllerVendaMetodosPagar;
    function TipoDePagamento(ATipo: TTypeTipoPagamento): iControllerVendaMetodosPagar;
    function TipoDaVenda(ATipo: TTypeTipoVenda)        : iControllerVendaMetodosPagar;
    function Executar                                  : iControllerVendaMetodosPagar;
    function &End                                      : iControllerVendaMetodos;
  end;

implementation

{ TControllerVendaMetodosPagar }

function TControllerVendaMetodosPagar.&End: iControllerVendaMetodos;
begin
  Result := FParent.Metodos;
end;

procedure TControllerVendaMetodosPagar.Validacao;
begin
  if not Assigned(FMetodoPagamento) then
    raise Exception.Create(
      'Não é possível executar o pagamento, sem um método de pagamento.'
    );
end;

constructor TControllerVendaMetodosPagar.Create(AParent: iControllerVenda; AModel: iModelVenda);
begin
  FParent := AParent;
  FModel  := AModel;
end;

destructor TControllerVendaMetodosPagar.Destroy;
begin

  inherited;
end;

function TControllerVendaMetodosPagar.Executar: iControllerVendaMetodosPagar;
begin
  Result := Self;
  Validacao;

  case FTipoVenda of
    tvVenda:     begin
                   FMetodoPagamento
                     .Processar
                      .SetValor(FModel.Item.ValorTotal)
                     .&End
                   .&End;
                 end;

    tvDevolucao: begin
                   FMetodoPagamento
                     .Estornar
                      .SetValor(FModel.Item.ValorTotal)
                     .&End
                   .&End;
                 end;
  end;
end;

class function TControllerVendaMetodosPagar.New(AParent: iControllerVenda; AModel: iModelVenda): iControllerVendaMetodosPagar;
begin
  Result := Self.Create(AParent, AModel);
end;

function TControllerVendaMetodosPagar.TipoDaVenda(
  ATipo: TTypeTipoVenda): iControllerVendaMetodosPagar;
begin
  Result     := Self;
  FTipoVenda := ATipo;
end;

function TControllerVendaMetodosPagar.TipoDePagamento(
  ATipo: TTypeTipoPagamento): iControllerVendaMetodosPagar;
begin
  Result := Self;
  case ATipo of
    tpDinheiro     : FMetodoPagamento := FModel.Pagamento.Dinheiro;
    tpCartaoDebito : FMetodoPagamento := FModel.Pagamento.CartaoDeDebito;
    tpCartaoCredito: FMetodoPagamento := FModel.Pagamento.CartaoDeCredito;
  end;
end;

end.
